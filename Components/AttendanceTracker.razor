@using EventEase.Models
@using EventEase.Services
@inject StateContainer StateContainer

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Attendance Tracker</h5>
    </div>
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center">
            <div class="progress" style="width: 70%;">
                <div class="progress-bar" role="progressbar" 
                     style="width: @CalculateAttendancePercentage()%" 
                     aria-valuenow="@Event.CurrentAttendees" 
                     aria-valuemin="0" 
                     aria-valuemax="@Event.MaxAttendees">
                    @Event.CurrentAttendees/@Event.MaxAttendees
                </div>
            </div>
            <span class="badge bg-@GetStatusBadgeColor()">@GetStatusText()</span>
        </div>
        
        @if (StateContainer.UserState.RegisteredEvents.Contains(Event.Id))
        {
            <div class="alert alert-success mt-3">
                <i class="bi bi-check-circle"></i> You are registered for this event
            </div>
        }
        else if (Event.CurrentAttendees < Event.MaxAttendees)
        {
            <button class="btn btn-primary mt-3" @onclick="OnRegisterClick">Register Now</button>
        }
        else
        {
            <div class="alert alert-warning mt-3">
                <i class="bi bi-exclamation-triangle"></i> This event is fully booked
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public required Event Event { get; set; }

    [Parameter]
    public EventCallback OnRegister { get; set; }

    private string GetStatusBadgeColor()
    {
        if (Event.CurrentAttendees >= Event.MaxAttendees)
            return "danger";
        if (Event.CurrentAttendees >= Event.MaxAttendees * 0.8)
            return "warning";
        return "success";
    }

    private string GetStatusText()
    {
        if (Event.CurrentAttendees >= Event.MaxAttendees)
            return "Fully Booked";
        if (Event.CurrentAttendees >= Event.MaxAttendees * 0.8)
            return "Limited Spots";
        return "Available";
    }

    private int CalculateAttendancePercentage()
    {
        return (int)((double)Event.CurrentAttendees / Event.MaxAttendees * 100);
    }

    private async Task OnRegisterClick()
    {
        await OnRegister.InvokeAsync();
    }
}